스트래티지 패턴

알고리즘을 정의하고 각각 캡슐화하여 교환해서 사용할 수 있도록 만든다.
이 패턴을 활용하면 알고리즘을 사용하는 클라이언트와 독릭접으로 알고리즘을 변경할 수 있다.

이 프로젝트에서는 사람을 주제로 한다.
사람마다 울음 소리는 다르기 때문에 그 부분을 캡슐화하여 교환해서 사용하도록 한다.
정의한 울음 소리는 총 4가지로, 귀여움, 시끄러움, 평범, 조용한 울음 소리로 나누었다.

간단한 프로젝트인만큼 알고리즘 자체는 간단하다.
여기선 각 울음 소리를  표현하는 출력문만 있으면 된다.

Main 클래스를 살펴보면 이양희라는 사람을 생성하고 총 두번에 걸쳐 울음 소리를 실행하고 있다.
이 때 각 메서드가 실행될 때마다 울음 소리가 달라지는데 이는 울음 소리를 얼마든지 교환할 수 있도록 만들었기 때문에 가능하다.

다시 Main 클래스를 보면 이양희라는 사람은 처음 울 때 굉장히 시끄럽게 울고 있다.(흐아아아앙!)
만일 시끄럽게 울 때의 표현 알고리즘(여기선 단순 출력문)이 변경되야 한다면 Main 클래스에서 무언가 변경해야 할까? 답은 아니오이다.
LoudCry 클래스의 알고리즘만 변경하면 해당 클래스의 알고리즘을 사용하는 Main 클래스 입장에서는 아무 작업없이 변경된 알고리즘을 확인할 수 있다.
직접 LoudCry 클래스의 cryPerson 메소드의 내용을 '흐아아앙!'에서 '꺼이꺼이'로 바꾸어 확인해보자.