어뎁터 패턴

한 클래스의 인터페이스를 클라이언트에서 사용하고자 하는 다른 인터페이스로 변환한다.
어댑터를 이용하면 인터페이스 호환성 문제 때문에 같이 쓸 수 없는 클래스들을 연결해서 쓸 수 있다.

현재 프로젝트에서는 expression(표정)의 기능이 추가되었다.
표정은 총 3가지로 화남, 귀여움, 슬픈 표정이 있다.
이 기능 역시 스트래티지 패턴을 적용하여 기능 교환이 가능하게끔 구현했다.

근데 고객의 요청이 들어왔다.
'양희는 울 때 기존처럼 울게만 해주시고 준혁이는 울 때 표정도 넣어주세요'

그렇다면 Cry를 상속받은 클래스들의 cryPerson 메서드에 있는 알고리즘을 수정하여
울음 소리를 내기전에 표정 정보를 받아와 보여줘야 할까?
그렇게된다면 순수한 Cry 기능 자체가 변질되어 버린다.
또 한 사람별로 너는 울기만 해!, 너는 울면서 표정지어! 라는 유연한 기능 수행을 못하게 되버린다.

어뎁터는 말 그대로 어뎁터이다.
기존에 있던 기능은 어뎁터를 만나면서 변화하되 어뎁터를 빼면 다시 기존 기능으로 돌아와야 한다.
B타입의 USB가 있다고 생각해보자. 이 B타입은 갤럭시 S8부터의 핸드폰과 연결이 안된다.
하지만 C타입 어뎁터를 연결하게된다면 B타입에서 C타입의 USB로 변경된다.
그렇다면 갤럭시 S8부터의 핸드폰 충전이 가능해진다!
하지만 C타입 어뎁터를 빼는 순간 다시 기존의 B 타입의 USB로 돌아간다. 

AdapterCry의 클래스를 살펴보면 Cry 인터페이스를 상속받고 있다.
이유는 우는 기능이 개조되야 하고, Person 클래스에서는 Cry 타입을 파라미터로 삼고있기 때문이다.
또 생성자로 Cry와 Expression 두 객체를 파라미터로 받는다.
이 때 받은 객체들은 새롭게 정의된 cryPerson에서 해당 객체들의 기능들을 실행시키기 위함이다. 

이제 Adapter의 준비는 끝났다.
Main 클래스에서 AdapterCry를 선언하고 원하는 울음 소리와 표정만을 넘겨주면 된다.